using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Avalonia.Controls;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using RapidDeskToolkit.SourceGenerator.SourceGenerator;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace RapidDeskToolkit.SourceGenerator.LanguageResources;

public class LanguageGenerateClassInfo : BaseGenerateClassInfo
{
    private static readonly string CultureInfo = $"global::{typeof(CultureInfo).FullName}";
    private static readonly string ResourceProvider = $"global::{typeof(ResourceProvider).FullName}";
    private static readonly string Enumerable = $"global::{nameof(System)}.Collections.Generic.IEnumerable<string>";


    private static readonly string[] Exceptions =
    [
        "ResourceManager",
        "Culture"
    ];

    public TypeSyntax? DesignerType { get; set; }
    public GeneratorAttributeSyntaxContext GenerateCtx { get; set; }

    /// <inheritdoc />
    public override SourceText GenerateCode()
    {
        var targetSymbol =
            ModelExtensions.GetSymbolInfo(GenerateCtx.SemanticModel, DesignerType!).Symbol as INamedTypeSymbol;
        var targetFullName = targetSymbol?.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        var names = targetSymbol!
            .GetMembers()
            .OfType<IPropertySymbol>()
            .Select(x => x.Name)
            .Except(Exceptions).ToList();
        var nameSpace =
            GenerateCtx.TargetSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        var className = $"__{targetSymbol.Name}Provider";
        var syntaxTriviaList = TriviaList(
            Comment("// <Auto-Generated/> By RapidDeskToolkit.SourceGenerator"),
            Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)));
        var unit = CompilationUnit()
            .AddMembers(
                NamespaceDeclaration(IdentifierName(nameSpace.Replace("global::", "")))
                    .WithLeadingTrivia(syntaxTriviaList)
                    .AddMembers(
                        ClassDeclaration(GenerateCtx.TargetSymbol.Name)
                            .AddModifiers(Token(SyntaxKind.PartialKeyword))
                            .AddMembers(
                                names.Select(x =>
                                        ParseMemberDeclaration(
                                            $"""
                                             /// <summary>
                                             /// {x}
                                             /// </summary>
                                             public static string {x} => nameof({x});
                                             """
                                        )!)
                                    .ToArray())
                            .AddMembers(
                                ClassDeclaration(className)
                                    .AddModifiers(SyntaxKind.InternalKeyword)
                                    .AddBaseListTypes(ResourceProvider)
                                    .AddMembers(
                                        ParseMemberDeclaration(
                                            $$"""
                                              public override string this[string key] {
                                                  get {
                                                      switch(key){
                                                          {{string.Concat(names.Select(static x => $"case nameof({x}): return this.{x}; \n"))}}
                                                      }
                                                      return key;
                                                  }
                                              }
                                              """
                                        )!)
                                    .AddMembers(
                                        ParseMemberDeclaration(
                                            $$"""
                                              public override {{Enumerable}} Keys(){
                                                  {{string.Concat(names.Select(static x => $"yield return nameof({x});\n"))}}
                                              }
                                              """
                                        )!)
                                    .AddMembers(
                                        $$"""
                                          public override {{CultureInfo}}? Culture
                                          {
                                              get => {{targetFullName}}.Culture;
                                              set
                                              {
                                                  if (value == null) return;
                                                  if (Equals({{targetFullName}}.Culture?.EnglishName, value.EnglishName)) return;
                                                  {{targetFullName}}.Culture = value;
                                                  UpdateSource();
                                                  OnChangeCompleted();
                                              }
                                          }
                                          """,
                                        """
                                        private void UpdateSource()
                                        {
                                            foreach(var key in this.Keys()){
                                                OnPropertyChanged(key);
                                            }
                                        }
                                        """,
                                        $$"""
                                          public static void Initialize()
                                          {
                                              RegisterProvider(new {{className}}());
                                          }
                                          """
                                    )
                                    .AddMembers(names.Select(x =>
                                            $"public string {x} => {targetFullName}.{x};")
                                        .ToArray())
                            )
                    )
            ).NormalizeWhitespace();
        return unit.GetText(Encoding.UTF8);
    }
}
